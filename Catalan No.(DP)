#include <iostream>
using namespace std;

// DP approach Time complexity=O(n^2)
unsigned long int catalanDP(unsigned int n)
{
	unsigned long int catalan[n + 1];

	catalan[0] = catalan[1] = 1;
  
	for (int i = 2; i <= n; i++) {
		catalan[i] = 0;
		for (int j = 0; j < i; j++)
			catalan[i] += catalan[j] * catalan[i - j - 1];
	}

	return catalan[n];
}

// Recusive way Time complexity= exponential of catalan number
/* long int catalanR(int n){
    if(n<=1){
        return 1;
    }
    long int res=0;
    for(int i=0;i<=n-1;i++){
        res+=catalanR(i) * catalanR(n-i-1);
        

    }
    return res;
}
*/

int main()
{
	for (int i = 0; i < 10; i++)
		cout << catalanDP(i) << " ";
	return 0;
}
